[
["integration.html", "Lesson 3 Integration 3.1 Time series plot of satellite &amp; sentiment metrics 3.2 Box plot of satellite &amp; sentiment metrics before/after lockdown References", " Lesson 3 Integration 3.1 Time series plot of satellite &amp; sentiment metrics Let’s now integrate data from satellite and sentiment into the same monthly time series plot, first rescaling all metrics -1 to 1 for comparison. library(here) library(glue) library(readr) library(dplyr) library(lubridate) library(scales) library(ggplot2) library(plotly) # paths loc_name &lt;- &quot;delhi&quot; satellite_csv &lt;- here(glue(&quot;data/no2_{loc_name}_ee-chart.csv&quot;)) sentiments_csv &lt;- here(glue(&quot;data/sentiments_{loc_name}.csv&quot;)) metrics_csv &lt;- here(glue(&quot;data/metrics_{loc_name}.csv&quot;)) if (!file.exists(metrics_csv)){ sentiments &lt;- read_csv(sentiments_csv) %&gt;% rename(date = ym_date) %&gt;% mutate( metric = glue(&quot;{query_name}&quot;), sentiment = tf_score) %&gt;% select(metric, date, sentiment) satellite &lt;- read_csv(satellite_csv) %&gt;% transmute( date = mdy(`system:time_start`) %&gt;% floor_date(date, unit = &quot;month&quot;), no2 = NO2_column_number_density) %&gt;% group_by(date) %&gt;% summarize( no2 = mean(no2, na.rm=T)) %&gt;% mutate( metric = &quot;NO2&quot;, sentiment = rescale(no2, to = range(sentiments$sentiment))) %&gt;% select(metric, date, no2, sentiment) bind_rows( satellite, sentiments) %&gt;% write_csv(metrics_csv) } metrics &lt;- read_csv(metrics_csv) no2 &lt;- metrics %&gt;% filter(metric == &quot;NO2&quot;) %&gt;% pull(no2) rescale(metrics$sentiment, range(no2)) ## [1] 0.15333333 0.12092308 0.13118519 0.22055172 0.22753571 0.24167568 ## [7] 0.26440000 0.20256250 0.13567647 0.16161111 0.15234286 0.15647059 ## [13] 0.14190625 0.12376316 0.14454286 0.15102632 0.17931250 0.25122222 ## [19] 0.19288571 0.15763636 0.13678788 0.09280556 0.11336667 0.18072619 ## [25] 0.10148739 0.17543583 0.09280556 0.17236649 0.16051946 0.14604173 ## [31] 0.14581134 0.17842284 0.15703717 0.17077292 0.17940837 0.18745953 ## [37] 0.17712325 0.17846886 0.16844228 0.15944479 0.14294793 0.16197437 ## [43] 0.17675142 0.18183998 0.17175837 0.18325125 0.18197920 0.23222184 ## [49] 0.22476504 0.22451956 0.25539202 0.22412312 0.23983082 0.26440000 ## [55] 0.20869263 0.20745294 0.22383974 0.23362252 0.22392499 0.22418206 ## [61] 0.24399436 0.21422795 0.22862661 0.21662329 0.22724189 0.21288105 ## [67] 0.21770283 0.21302575 0.22058882 g &lt;- metrics %&gt;% ggplot( aes(x = date, y = sentiment, color = metric)) + geom_line() + scale_y_continuous( sec = sec_axis( ~rescale(., range(no2)), name = bquote(NO[2]~&quot;(µmol/&quot;~m^2~&quot;)&quot;))) + theme(legend.position=&quot;top&quot;) g ggplotly(g) Interesting! The air quality sentiment (red line) does seem to be inversely correlated with nitrogen dioxide (NO2; blue line). The sentiment for clean energy (green line) seems to correlate with satellite NO2 until 2019-03 then remains relatively steady. 3.2 Box plot of satellite &amp; sentiment metrics before/after lockdown Let’s compare averages before and after lockdown March 24, 2020. date_lockdown &lt;- as.Date(&quot;2020-03-24&quot;) metrics_ba &lt;- bind_rows( metrics %&gt;% filter(date &lt;= date_lockdown) %&gt;% mutate( period = &quot;before&quot;), metrics %&gt;% filter(date &gt; date_lockdown) %&gt;% mutate( period = &quot;after&quot;)) %&gt;% mutate( period = factor(period, c(&quot;before&quot;, &quot;after&quot;), ordered = T)) # View(metrics_ba) g &lt;- metrics_ba %&gt;% ggplot() + geom_boxplot(aes(x = metric, y = sentiment, fill = metric)) + facet_wrap(~period) ggplotly(g) The sentiments do not look significantly different before and after lockdown, especially relative to the dramatically different NO2 (blue). References "]
]
